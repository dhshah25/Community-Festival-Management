-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Artist"
(
    "ArtistID" serial NOT NULL,
    "Name" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "Genre" character varying(100) COLLATE pg_catalog."default",
    "ContactInfo" character varying(255) COLLATE pg_catalog."default",
    "Bio" text COLLATE pg_catalog."default",
    CONSTRAINT "Artist_pkey" PRIMARY KEY ("ArtistID")
);

CREATE TABLE IF NOT EXISTS public."Event"
(
    "EventID" serial NOT NULL,
    "FestivalID" integer NOT NULL,
    "Title" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "EventDate" date NOT NULL,
    "StartTime" time without time zone NOT NULL,
    "EndTime" time without time zone NOT NULL,
    "VenueID" integer NOT NULL,
    "Description" text COLLATE pg_catalog."default",
    CONSTRAINT "Event_pkey" PRIMARY KEY ("EventID")
);

CREATE TABLE IF NOT EXISTS public."Feedback"
(
    "FeedbackID" serial NOT NULL,
    "EventID" integer NOT NULL,
    "ParticipantName" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "Rating" integer,
    "Comments" text COLLATE pg_catalog."default",
    "FeedbackDate" date NOT NULL,
    CONSTRAINT "Feedback_pkey" PRIMARY KEY ("FeedbackID")
);

CREATE TABLE IF NOT EXISTS public."Festival"
(
    "FestivalID" serial NOT NULL,
    "Name" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "StartDate" date NOT NULL,
    "EndDate" date NOT NULL,
    "Description" text COLLATE pg_catalog."default",
    CONSTRAINT "Festival_pkey" PRIMARY KEY ("FestivalID")
);

CREATE TABLE IF NOT EXISTS public."Participant"
(
    "Email" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "ParticipantName" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "RegistrationDate" date NOT NULL,
    "RegistrationType" character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT "Participant_pkey" PRIMARY KEY ("Email")
);

CREATE TABLE IF NOT EXISTS public."Performance"
(
    "PerformanceID" serial NOT NULL,
    "EventID" integer NOT NULL,
    "ArtistID" integer NOT NULL,
    "PerformanceTime" time without time zone NOT NULL,
    "Duration" integer,
    "SpecialNotes" text COLLATE pg_catalog."default",
    CONSTRAINT "Performance_pkey" PRIMARY KEY ("PerformanceID")
);

CREATE TABLE IF NOT EXISTS public."Registration"
(
    "RegistrationID" serial NOT NULL,
    "FestivalID" integer NOT NULL,
    "Email" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Registration_pkey" PRIMARY KEY ("RegistrationID"),
    CONSTRAINT email UNIQUE ("Email")
);

CREATE TABLE IF NOT EXISTS public."Sponsor"
(
    "SponsorID" serial NOT NULL,
    "Name" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "Contribution" numeric(10, 2),
    "ContactInfo" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "SponsorshipType" character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT "Sponsor_pkey" PRIMARY KEY ("SponsorID")
);

CREATE TABLE IF NOT EXISTS public."Ticket"
(
    "TicketID" serial NOT NULL,
    "EventID" integer NOT NULL,
    "BuyerName" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "PurchaseDate" date NOT NULL,
    "Price" numeric(10, 2),
    "TicketType" character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Ticket_pkey" PRIMARY KEY ("TicketID")
);

CREATE TABLE IF NOT EXISTS public."Venue"
(
    "VenueID" serial NOT NULL,
    "Name" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "Address" text COLLATE pg_catalog."default" NOT NULL,
    "Capacity" integer,
    "ContactInfo" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Venue_pkey" PRIMARY KEY ("VenueID")
);

CREATE TABLE IF NOT EXISTS public."Volunteer"
(
    "VolunteerID" serial NOT NULL,
    "Name" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "ContactInfo" character varying(255) COLLATE pg_catalog."default",
    "Availability" character varying(50) COLLATE pg_catalog."default" DEFAULT 'Available'::character varying,
    "Role" character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT "Volunteer_pkey" PRIMARY KEY ("VolunteerID")
);

ALTER TABLE IF EXISTS public."Event"
    ADD CONSTRAINT event_festivalid_fkey FOREIGN KEY ("FestivalID")
    REFERENCES public."Festival" ("FestivalID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Event"
    ADD CONSTRAINT event_venueid_fkey FOREIGN KEY ("VenueID")
    REFERENCES public."Venue" ("VenueID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Feedback"
    ADD CONSTRAINT eventkey FOREIGN KEY ("EventID")
    REFERENCES public."Event" ("EventID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Performance"
    ADD CONSTRAINT performance_artistid_fkey FOREIGN KEY ("ArtistID")
    REFERENCES public."Artist" ("ArtistID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Performance"
    ADD CONSTRAINT performance_eventid_fkey FOREIGN KEY ("EventID")
    REFERENCES public."Event" ("EventID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Registration"
    ADD CONSTRAINT participant FOREIGN KEY ("Email")
    REFERENCES public."Participant" ("Email") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS email
    ON public."Registration"("Email");


ALTER TABLE IF EXISTS public."Registration"
    ADD CONSTRAINT registration_festivalid_fkey FOREIGN KEY ("FestivalID")
    REFERENCES public."Festival" ("FestivalID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Ticket"
    ADD CONSTRAINT ticket_eventid_fkey FOREIGN KEY ("EventID")
    REFERENCES public."Event" ("EventID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;
